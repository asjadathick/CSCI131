; demo of simplified non-interrupt OS
; 
;  system calls
;     exit = os executes halt instruction!
;     read = os will read a line from keyboard
;        returning when a newline character read
;     write = os will write a line to teletype
;        returning when line all written (nul character at end)
;    atoi, and itoa - integer<->string conversions
;
; define the operating system calls as trap instructions
exit=104400
readline=104401
writeline=104402
atoi=104403
itoa=104404
; 
; data for the trap instruction
trapaddr=34 ; "interrupt entry point" - start address of request handler
trapsw=36 ; location for status word
opsyssw=40 ; value of status word - priority 1
;
; data for the teleprinter
tps=177564 ; control register for console output
tpb=177566 ; data register for console output
;
; data for the keyboard
tks=177560 ; control register for keyboard
tkb=177562 ; data register for keyboard
;
.origin 1000
osstart: mov #os,@#trapaddr
  mov #opsyssw, @#trapsw
  jmp application
; low level non-interrupt I/O
; getchar
; wait for flag to set
; read the character
getchar:inc @#tks ; enable
getloop: bit #200,@#tks ; wait for done flag
    beq getloop
    movb @#tkb,r0
    return
; putchar - need to echo the character
putchar:mov r0,@#tpb
wtc:	tstb @#tps
  bpl wtc
  return
; my micro operating system
; I will be using r0 and r1 (and maybe other registers) so save these
os:mov r0,-(sp)
  mov r1,-(sp)
; find out which request - pick up return address as saved in stack
  mov 4(sp),r1
; program counter has been incremented - take off 2
  dec r1
  dec r1
; r1 should hold the address of the trap instruction
  mov (r1),r0
; r0 now holds the actual trap instruction that was executed
; bottom 8 bits contain request id - (though typically far fewer 
; than 255 calls defined)
; clear the top byte
  bic #177400,r0
; convert index to byte offset
  rol r0
  jmp @osfns(r0)
;
; handle return from os call
; when reach here r0 should hold number of arguments used
; by last os call; need to adjust return address that is on stack
osreturn:clc
  rol r0
  add r0,4(sp)
; and put back registers
  mov (sp)+,r1
  mov (sp)+,r0
  rti
;
; function table for my os
osfns: exitos
  read
  write
  getint
  putint
;
; exit from os
exitos: nop
  nop
  halt
  br exitos ; no escape
; read 
;    takes one argument - address of buffer where input to be stored
;    (argument will be in location immediately after trap instruction)
; uses r0 and r1
; read characters (echoing them to teleprinter) and store until newline dealt with
; (and add a nul  byte for safety before returning)
; on entry r1 still holding address with trap instruction
read: inc r1
  inc r1
; r1 now holds address that stores address of buffer
; make it store the address of buffer
  mov (r1),r1
readloop:  call getchar
  call putchar
  movb r0,(r1)+
  cmpb r0,#15
  bne readloop
  clr r0
  movb r0,(r1)+
; now return from this request - set r0 to 1 as this request had 1 argument
  inc r0
  br osreturn
;
; write
; uses r0
; sends characters until get a nul
write:inc r1
   inc r1
   mov (r1),r1
writeloop:	movb (r1)+,r0
   bne more
;
   mov #1,r0
   br osreturn
more:call putchar
   br writeloop
;
; getint 
; processes all digits converting to integer
; will use r3 while doing multiplications (so save and restore)
; assumes only short integers so takes only low order part of product
; has a local variable (valptr)
getint: mov r3,-(sp)
 inc r1
 inc r1
 mov (r1),valptr
 inc r1
 inc r1
 mov (r1),r1
 clr r3
getintl:cmpb (r1),#60
   blt getintend
   cmpb (r1),#71
   bgt getintend
; character is a decimal digit
   movb (r1)+,r0
  sub #60,r0
; r0 now holds numeric value 0-9 for next decimal digit
  mul #12,r3
 add r0,r3
 br getintl
; result in r3; put it where it should go
getintend: mov r3,@valptr
; replace r3 with saved value
  mov (sp)+,r3
; note use of 2 args
  mov #2,r0
  br osreturn
;
valptr: .word 0
; putint - this is a non-recursive version
; use r2,r3 and same local variable valptr
putint:mov r2,-(sp)
  mov r3,-(sp)
  inc r1
  inc r1
  mov (r1),valptr
  inc r1
  inc r1
  mov (r1),r1
  mov @valptr,r0
  mov #10,r2
; start by filling buffer with spaces
putintfill:movb #40,(r1)+
   sob r2,putintfill
; now generate digits
  tst r0
 bgt nonzero
; simply put 0
 movb #60,-(r1)
 br putintdone
 nonzero: clr r2
  mov r0,r3
putintdiv: tst r3
  beq putintdone
; do a division
  div #12,r2
; remainder in r3 is next value of next digit to go in buffer
  add #60,r3
  movb r3,-(r1)
; quotient in r2 
  mov r2,r3
  clr r2
  br putintdiv
; putintdone -
; replace r3 and r2
putintdone:  mov (sp)+,r3
 mov (sp)+,r2
; 2 args
 mov #2,r0 
br osreturn
.origin 2000
application:writeline
  msg3
  readline
  inbuf
  atoi
  num1
  inbuf
  writeline
  msg4
  readline
  inbuf
  atoi
  num2
  inbuf
  mov num2,r0
  add num1,r0
  mov r0,sum
  writeline
  msg5
  itoa
  sum
  numbuf
  writeline
  numbuf
  writeline
  newline
  exit
;
.origin 2400
; data
newline: .word 15
msg3: .string "Enter num1 : "
msg4: .string "Enter num2 : "
msg5: .string "num1 + num2 = "
inbuf: .blkw 20
num1: .blkw 1
num2: .blkw 1
sum: .blkw 1
numbuf: .blkw 5
.end osstart
