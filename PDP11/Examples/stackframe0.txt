; Array of struct
; each struc needs fourteen bytes
; 8 for name - 2 each for day, month, year
; more convenient to make 16 (simplifies turning
; array index into byte offset)
strucsz=20 
tps=177564 ; control register for console output
tpb=177566 ; data register for console output
mark2=6402 ; mark instruction with 2 args
.origin 1000
start:clr r5 ; just to have an 'old r5'
  mov r5,-(sp) ; save old r5
  ; now save arguments
  mov #data,-(sp)
  mov #4,-(sp)
  ; now save the magic mark instruction for 2 args
  mov #mark2,-(sp)
  mov sp,r5 ; setting frame pointer
  call oldest
  call puts
  halt
;
; puts
;   On entry, r0 holds a byte address
;   Print chars until get null byte
puts:mov r0,r1
putl:clr r0
  movb (r1)+,r0
  beq done
  call putch
  br putl
done: return
; print character
putch:mov r0,@#tpb
wtc:	tstb @#tps
  bpl wtc
  return
; oldest
; examine those structs
;  Going to use some local variables on stack!
;  Find their positions, and positions of arguments, relative to the stack frame pointer (r5)
; 
;  first must reserve that space by adjusting stack pointer
;
;  Now stack should be
;    old r5 (i.e. 0)
;    first argument - address of array
;    second argument - number of elements
;    the magic mark instruction  <----- r5 pointing to this word
;    the return address
;    (space for local variables)  index of oldest
;                  day
;                  month
;                  year
;   so address of array (data) is 4(r5), address of num is 2(r5)
;   address of index is -4(r5); address of day is -6(r5), address of month -10(r5)
;   and address of year is -12(r5)
oldest:sub #10,sp
   clr -4(r5)  ; ndx=0
   clr r0
   mov 4(r5),r1	; address of data in r1
   call getstruct ; returns with r0 holding address of data[0]
   mov 10(r0),r1  ; getday
   mov r1,-6(r5)
   mov 12(r0),r1 ; getmonth
   mov r1,-10(r5)
   mov 14(r0),r1 ; getyear
   mov r1,-12(r5)
; now loop through other records to find any that are older
; use r2 for loop counter
   clr ,r2
oldieloop:inc r2
; num is 2(r5)
   cmp r2,2(r5)
   beq doneloop
   mov r2,r0
   mov 4(r5),r1
   call getstruct
; r0 holds base address of next record
   mov 14(r0),r1 ;  r1 holds year for other record
   cmp -12(r5),r1 ; compare with year for oldest so far
   blt oldieloop ; current has older year
   bgt change
; same year, compare month
   mov 12(r0),r1
   cmp -10(r5),r1
   blt oldieloop
   bgt change
; same year and month, compare day of month
   mov 10(r0),r1
   cmp -6(r5),r1
   blt oldieloop
; change - this record represents older person
; replace info in 'local' variables on stack
;
change:mov r2,-4(r5)
   mov 14(r0),r1
   mov r1,-12(r5)
   mov 12(r0),r1
   mov r1,-10(r5)
   mov 10(r0),r1
   mov r1,-6(r5)
   br oldieloop
; 
; done - retrieve index of oldest person
doneloop:mov -4(r5),r0
  mov 4(r5),r1
  call getstruct
; r0 holds struct address, 0 offset for string
; so it is the return value
; still have to clean up stack - those local variables
 add #10,sp
  rts r5 ; return using frame pointer
; getstruct
;  on entry r0 is index 'ndx' into array
;        r1 is base address of data
;  on exit r0 is address of data[ndx]
getstruct: clc
  rol r0
  rol r0
  rol r0
  rol r0
  add r1,r0
  return
.origin 2000
; put data in a separate segment
data: 
   .string "tom    "
   .word 13, 4, 3676 
   .word 0
   .string "dick   "
   .word 34, 3, 3673
   .word 0
   .string "harry  "
   .word 23, 7, 3660
   .word 0
   .string "sue    "
   .word 22, 13, 3671
   .word 0
.end start

